package com.shine.leetcode;

/**
 * description:打家劫舍
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的
 * 房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 * 示例 1:
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 * 分析：如果使用递归回溯，每个房间有偷不偷两种 时间复杂度为O(2^n)
 * 		如果使用贪心算法，每次只取最大的
 * 动态规划：
 * 同时从相邻的两个房间盗取会报警
 * a、若选择第i个房间，则一定不能选第i-1个房间
 * b、若不选第i个房间，则选前i-1个房间
 * 1.确认原问题和子问题 原问题：求n个房间的最优解，子问题求前1个，前2个，，，前n-1个房间的最优解
 * 2.确认状态 第i个状态为前i个房间的最优解
 * 3.确认边界状态的值 前1个房间最优解为第一个房间的钱财，前2个房间的最优解为第1、2个房间中较多的钱财
 * 4.确定状态转移方程  选择第i个，最优解为第i和前第i-2个房间的最优解 不选第i个 为前i-1个房间的最优解
 * 动态规划状态转移方程：dp[i] = max(dp[i-1],dp[i-2]+ i的钱)； i>=2;
 * @author shine
 * @date 2019/9/26 15:01
 * @version 1.0
 */
public class Test198 {
	public int rob(int[] nums) {
		if(nums.length == 0) return 0;
		if(nums.length == 1) return nums[0];
		int[] dp = new int[nums.length]; // dp为最优解数组,dp[i]表示前i个房间的最优解
		dp[0] = nums[0];
		dp[1] = Math.max(nums[0],nums[1]);
		for (int i = 2; i < nums.length; i++) {
			dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);
		}
		return dp[nums.length-1];
	}
}
